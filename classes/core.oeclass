## Core class for core functionality.
##
## This class is always used. It contains the most standard functionality
## needed for building.

inherit arch
inherit stage
inherit package

# FIXME: inherit in specialized classes, so that fx. image does not have
# to have do_fetch
inherit fetch
inherit mirror

addtask configure after stage fetch unpack patch
addtask compile after configure
addtask install after compile
addtask build after install
addtask buildall after build
addtask clean

addtask listtasks

do_build = ""
do_build[func] = "1"


# All package DEPENDS_* and RDEPENDS_* variables should not be used by
# any task, and not explicitly included in task signatures (they are
# implicitly included as per the task dependencies they introduce).
META_EMIT_PREFIX += ":DEPENDS_${PN} :RDEPENDS_${PN} :PROVIDES_${PN}"

# Default recipe type is machine, so other recipe type classes must
# override this, and any other recipe type defaults as needed
RECIPE_TYPE = "machine"
RE = ""

CLASS_DEPENDS ?= ""

#
# Import standard Python modules as well as custom OE modules
# (disabled for now...)
#

#addhandler oe_import

#
# Shell functions for printing out messages in the BitBake output
#

die() {
    oefatal "$*"
}

oenote() {
    echo "NOTE:" "$*"
}

oewarn() {
    echo "WARNING:" "$*"
}

oefatal() {
    echo "FATAL:" "$*"
    exit 1
}

oedebug() {
    test $# -ge 2 || {
        echo "Usage: oedebug level \"message\""
        exit 1
    }

    test ${OEDEBUG:-0} -ge $1 && {
        shift
        echo "DEBUG:" $*
    }
}
oedebug[expand] = "0"


do_listtasks[nostamp] = "1"
python do_listtasks() {
    import sys
    # emit variables and shell functions
    #bb.data.emit_env(sys.__stdout__, d)
    # emit the metadata which isnt valid shell
    for e in d.keys():
        if bb.data.getVarFlag(e, 'task', d):
            sys.__stdout__.write("%s\n" % e)
}


do_clean[dirs] = "${TOPDIR}"
do_clean[nostamp] = "1"
python do_clean() {
    """clear the build and temp directories"""
    workdir = d.getVar("WORKDIR", True)
    bb.note("removing " + workdir)
    shutil.rmtree(workdir)
    stampdir = d.getVar("STAMPDIR", True)
    bb.note("removing " + stampdir)
    shutil.rmtree(stampdir)
}

do_buildall[recadaptask] = "do_build"
do_buildall[func] = True

do_configure[dirs] = "${S} ${B}"

do_compile[dirs] = "${S} ${B}"

do_install[dirs] = "${D} ${S} ${B}"
do_install[cleandirs] = "${D}"

do_install[postfuncs] += "do_install_strip"
do_install_strip[import] = "runstrip"
def do_install_strip(d):
    import stat
    def isexec(path):
        try:
            s = os.stat(path)
        except (os.error, AttributeError):
            return 0
        return (s[stat.ST_MODE] & stat.S_IEXEC)
    if d.get("INHIBIT_PACKAGE_STRIP") != '1':
        os.chdir(d.get("D"))
        for root, dirs, files in os.walk("."):
            for f in files:
               file = os.path.join(root, f)
               if os.path.islink(file) or os.path.isdir(file):
                   continue
               if isexec(file) or ".so" in os.path.basename(file):
                   runstrip(file, d)

def runstrip(file, d):
    # Function to strip a single file, called from populate_packages below
    # A working 'file' (one which works on the target architecture)
    # is necessary for this stuff to work, hence the addition to do_package[depends]

    import commands, stat, re, magic

    pathprefix = "export PATH=%s; " % bb.data.getVar('PATH', d, True)
    print "pathprefix =",pathprefix

    filemagic = magic.open(magic.MAGIC_NONE)
    filemagic.load()
    filetype = filemagic.file(file)
    filemagic.close()

    if not filetype:
        bb.error("runstrip() unable to determine file type: %s"%(file))
        return

    if "not stripped" not in filetype:
        print "runstrip() skip %s"%(file)
        return
    target_elf = d.getVar('TARGET_ELF', True)
    if target_elf:
        target_elf = re.compile(target_elf)
    host_elf = d.getVar('HOST_ELF', True)
    if host_elf:
        host_elf = re.compile(host_elf)
    build_elf = d.getVar('BUILD_ELF', True)
    if build_elf:
        build_elf = re.compile(build_elf)

    if host_elf and host_elf.match(filetype):
        varprefix = ""
    elif target_elf and target_elf.match(filetype):
        varprefix = "TARGET_"
    elif build_elf and build_elf.match(filetype):
        varprefix = "BUILD_"
    else:
        return

    strip = d.getVar("%sSTRIP"%(varprefix), True)
    if not strip:
        bb.error("runstrip() no or empty %sSTRIP var"%(varprefix))
        return

    objcopy = d.getVar("%sOBJCOPY"%(varprefix), True)
    if not objcopy:
        bb.error("runstrip() no or empty %sOBJCOPY var"%(varprefix))
        return

    # If the file is in a .debug directory it was already stripped,
    # don't do it again...
    if os.path.dirname(file).endswith(".debug"):
        bb.note("Already ran strip")
        return

    newmode = None
    if not os.access(file, os.W_OK):
        origmode = os.stat(file)[stat.ST_MODE]
        newmode = origmode | stat.S_IWRITE
        os.chmod(file, newmode)

    extraflags = ""
    if ".so" in file and "shared" in filetype:
        extraflags = "--remove-section=.comment --remove-section=.note --strip-unneeded"
    elif "shared" in filetype or "executable" in filetype:
        extraflags = "--remove-section=.comment --remove-section=.note"

    oelite.util.makedirs(os.path.join(os.path.dirname(file), ".debug"))
    debugfile=os.path.join(os.path.dirname(file), ".debug", os.path.basename(file))

    stripcmd = "'%s' %s '%s'"                       % (strip, extraflags, file)
    objcpcmd = "'%s' --only-keep-debug '%s' '%s'"   % (objcopy, file, debugfile)
    objlncmd = "'%s' --add-gnu-debuglink='%s' '%s'" % (objcopy, debugfile, file)

    print "runstrip() %s"%(objcpcmd)
    print "runstrip() %s"%(stripcmd)
    print "runstrip() %s"%(objlncmd)

    ret, result = commands.getstatusoutput("%s%s" % (pathprefix, objcpcmd))
    if ret:
        bb.note("runstrip() '%s' %s" % (objcpcmd,result))

    ret, result = commands.getstatusoutput("%s%s" % (pathprefix, stripcmd))
    if ret:
        bb.note("runstrip() '%s' %s" % (stripcmd,result))

    ret, result = commands.getstatusoutput("%s%s" % (pathprefix, objlncmd))
    if ret:
        bb.note("runstrip() '%s' %s" % (objlncmd,result))

    if newmode:
        os.chmod(file, origmode)


# Make sure TARGET_ARCH isn't exported
# (breaks Makefiles using implicit rules, e.g. quilt, as GNU make has this
# in them, undocumented)
TARGET_ARCH[unexport] = "1"

# Make sure MACHINE isn't exported
# (breaks binutils at least)
MACHINE[unexport] = "1"

# Make sure DISTRO isn't exported
# (breaks sysvinit at least)
DISTRO[unexport] = "1"


addhook core_machine_override to post_recipe_parse first after fetch_init
def core_machine_override(d):

    machine = d.get("MACHINE")
    if not machine:
        return

    recipe_arch = d.get("RECIPE_ARCH")

    def src_uri_machine_override():
        file_dirname = d.get("FILE_DIRNAME")
        filespaths = []
        for p in d.get("FILESPATHPKG").split(":"):
            path = os.path.join(file_dirname, p, "MACHINE_" + machine)
            if os.path.isdir(path):
                filespaths.append(path)
        if len(filespaths) != 0:
            for fetcher in d["__fetch"]:
                if not fetcher.scheme == "file":
                    continue
                path = fetcher.fetcher.localpath
                for filespath in filespaths:
                    if path.startswith(filespath):
                        return True
        return False

    if src_uri_machine_override():
        if d.get("TARGET_ARCH") == d.get("MACHINE_ARCH"):
            d["EXTRA_ARCH"] = ".${MACHINE}"
        else:
            raise Exception("Machine override of %s recipe"%(d["RECIPE_TYPE"]))

BLACKLIST_PREFIX += "PREFERRED_PROVIDER_ PREFERRED_VERSION_"

addhook blacklist to post_recipe_parse first after preconditions
def blacklist(d):
    import re
    blacklist_var = (d.getVar("BLACKLIST_VAR", True) or "").split()
    blacklist_prefix = (d.getVar("BLACKLIST_PREFIX", True) or "").split()
    blacklist = "$|".join(blacklist_var) + "$"
    if blacklist_prefix:
        blacklist += "|" + "|".join(blacklist_prefix)
    if not blacklist:
        return
    sre = re.compile(blacklist)
    for var in d.keys():
        if sre.match(var):
            d.delVar(var)

addhook preconditions to post_recipe_parse first after set_useflags
def preconditions(d):
    for var in d.get_vars("precondition"):
        del d[var]

inherit useflags
inherit sanity

addhook core_varname_expansion to post_recipe_parse first
def core_varname_expansion(d):
    for varname in d.keys():
        try:
            expanded_varname = d.expand(varname)
        except oelite.meta.ExpansionError as e:
            print "Unable to expand variable name:", varname
            e.print_details()
            return False
        if expanded_varname != varname:
            flags = d.get_flags(varname, prune_var_value=False)
            #print "flags =",flags
            for flag in flags:
                d.set_flag(expanded_varname, flag, flags[flag])
            del d[varname]

REBUILDALL_SKIP[nohash] = True
RELAXED[nohash] = True

PRIORITY_MAX			= "90"
PRIORITY_MIN			= "-9"
RECIPE_PREFERENCE_PRIORITY	= "2"
PACKAGE_PREFERENCE_PRIORITY	= "3"

PRIORITY ?= "${DEFAULT_PREFERENCE}"
DEFAULT_PREFERENCE ?= "0"

addhook core_priority to post_recipe_parse last
def core_priority(d):
    layer_name = d.get('LAYER_NAME')
    recipe_name = d.get('RECIPE_NAME')
    recipe_version = d.get('RECIPE_VERSION')

    preferred_recipes = d.get('__preferred_recipes') or {}
    for layer, version in preferred_recipes.get(recipe_name, []):
        if layer is not None and layer_name != layer:
            continue
        if version is not None and recipe_version != version:
            continue
        d.set('LAYER_PRIORITY', '${RECIPE_PREFERENCE_LAYER_PRIORITY}')
        if version is not None:
            d.set('PRIORITY', '${RECIPE_PREFERENCE_PRIORITY}')

    preferred_packages = d.get('__preferred_packages') or {}
    package_version = d.get('PV')
    for package in d.get('PACKAGES').split():
        for recipe, layer, version in preferred_packages.get(package, []):
            if recipe is not None and recipe_name != recipe:
                continue
            if layer is not None and layer_name != layer:
                continue
            if version is not None and package_version != version:
                continue
            d.set('LAYER_PRIORITY_' + package,
                  '${PACKAGE_PREFERENCE_LAYER_PRIORITY}')
            if version is not None:
                d.set('PRIORITY_' + package, '${PACKAGE_PREFERENCE_PRIORITY}')

# Local Variables:
# mode: python
# End:
